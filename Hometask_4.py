# Урок 4. Непрерывная случайная величина
import math
# подключим пакет интегрирования из библиотеки scipy
from scipy import integrate
'''
1. Случайная непрерывная величина A имеет равномерное 
распределение на промежутке (200, 800]. 
Найдите ее среднее значение и дисперсию.
'''
a = 200
b = 800
p = 1 / (b - a)
Mean = (a + b) / 2
Disp = math.pow((b - a), 2) / 12
print('Task 1. Среднее значение:  ',Mean)
print('Task 1. Дисперсия:  ', Disp)
'''
2. О случайной непрерывной равномерно распределенной 
величине B известно, что ее дисперсия равна 0.2. 
Можно ли найти правую границу величины B и ее среднее 
значение зная, что левая граница равна 0.5? 
Если да, найдите ее.
'''
def solve_square_root_equation (a, b, c):
    # ax^2 + bx + c = 0
    discr = b ** 2 - 4 * a * c
    print("Дискриминант D = %.2f" % discr)
 
    if discr > 0:
        x1 = (-b + math.sqrt(discr)) / (2 * a)
        x2 = (-b - math.sqrt(discr)) / (2 * a)
        print("x1 = %.2f \nx2 = %.2f" % (x1, x2))
        return (x1, x2)
    elif discr == 0:
        x = -b / (2 * a)
        print("x = %.2f" % x)
        return (x)
    else:
        print("Корней нет")
        return ("Error")
Disp = 0.2
a = 0.5
# D = (b^2 - 2ab + a^2) / 12
# b  > a
# b^2 - 2ab = D * 12 - a^2 = first_step
first_step = Disp * 12 - math.pow(a, 2)
# b^2 - 2a * b - first_step = 0
roots = solve_square_root_equation(1, -2*a, - first_step)
for i in roots:
    if i > a:
        b = i
        print('Task 2. Правая граница:  ', round(b,3))
Mean = (a + b) / 2
print('Task 2. Среднее значение:  ',round(Mean,))

'''
3. Непрерывная случайная величина X распределена нормально 
и задана плотностью распределения 
f(x) = (1 / (4 * sqrt(2pi))) * exp((-(x+2)**2) / 32)

Найдите:
а). M(X)
б). D(X)
в). std(X) (среднее квадратичное отклонение)
'''
# f(x) = (1 / (4 * sqrt(2pi))) * exp((-(x+2)**2) / 32)
Mean = -2
print('Task 3. Среднее значение:  ',Mean)
Sigma = 4
print('Task 3. Среднее квадратичное отклонение:  ',Sigma)
disp = math.pow(Sigma, 2)
print('Task 3. Дисперсия:  ',disp)
'''
4. Рост взрослого населения города X имеет 
нормальное распределение.
Причем, средний рост равен 174 см, 
а среднее квадратичное отклонение равно 8 см.
Какова вероятность того, что случайным образом 
выбранный взрослый человек имеет рост:
а). больше 182 см
б). больше 190 см
в). от 166 см до 190 см
г). от 166 см до 182 см
д). от 158 см до 190 см
е). не выше 150 см или не ниже 190 см
ё). не выше 150 см или не ниже 198 см
ж). ниже 166 см.
'''
Mean = 174
Sigma = 8
def target_function_f(Xx):
    return (1 / (Sigma * math.sqrt(2*math.pi))) * math.exp(-(math.pow((Xx-Mean), 2)) / (2*math.pow(Sigma, 2)))
# f(x) = (1 / (Sigma * sqrt(2pi))) * exp((-(x-Mean)**2) / (2*Sigma**2))

# Task 4.а. Вероятность того что случайный взрослый имеет рост выше 182 см
x1 = 182
x2 = 10000
f_more_182 = integrate.quad(target_function_f, x1, x2)
print("Task 4.а. Вероятность того что случайный взрослый имеет рост выше 182 см:  ", round(f_more_182[0], 3))
# Task 4.б. Вероятность того что случайный взрослый имеет рост выше 190 см
x1 = 190
x2 = 10000
f_more_190 =  integrate.quad(target_function_f, x1, x2)
print("Task 4.б. Вероятность того что случайный взрослый имеет рост выше 190 см:  ", round(f_more_190[0], 3))
# Task 4.в. Вероятность того что случайный взрослый имеет рост выше 166 до 190 см:
x1 = 166
x2 = 190
f_166_190 = integrate.quad(target_function_f, x1, x2)
print("Task 4.в. Вероятность того что случайный взрослый имеет рост выше 166 до 190 см:  ", round(f_166_190[0], 3))
# Task 4.г. Вероятность того что случайный взрослый имеет рост выше 166 до 182 см
x1 = 166
x2 = 182
f_166_182 = integrate.quad(target_function_f, x1, x2)
print("Task 4.г. Вероятность того что случайный взрослый имеет рост выше 166 до 182 см:  ", round(f_166_182[0], 3))
# Task 4.д. Вероятность того что случайный взрослый имеет рост выше 158 до 190 см
x1 = 158
x2 = 190
f_158_190 = integrate.quad(target_function_f, x1, x2)
print("Task 4.д. Вероятность того что случайный взрослый имеет рост выше 158 до 190 см:  ", round(f_158_190[0], 3))
# Task 4.е. Вероятность того что случайный взрослый имеет рост ниже 150 или выше 190 см
x1 = 0
x2 = 150
x3 = 190 
x4 = 10000
f_less_150_and_more_190 = integrate.quad(target_function_f, x1, x2) + integrate.quad(target_function_f, x3, x4)
print("Task 4.е. Вероятность того что случайный взрослый имеет рост ниже 150 или выше 190 см:  ", round(f_less_150_and_more_190[0], 3))
# Task 4.ё. Вероятность того что случайный взрослый имеет рост ниже 150 или выше 198 см
x1 = 0
x2 = 150
x3 = 198 
x4 = 10000
f_less_150_and_more_198 = integrate.quad(target_function_f, x1, x2) + integrate.quad(target_function_f, x3, x4)
print("Task 4.ё. Вероятность того что случайный взрослый имеет рост ниже 150 или выше 198 см:  ", round(f_less_150_and_more_198[0], 3))
# Task 4.ж. Вероятность того что случайный взрослый имеет рост ниже 166
x1 = 0
x2 = 166
f_less_166 = integrate.quad(target_function_f, x1, x2)
print("Task 4.ж. Вероятность того что случайный взрослый имеет рост ниже 166:  ", round(f_less_166[0], 3))
'''
5. На сколько сигм (средних квадратичных отклонений) 
отклоняется рост человека, равный 190 см, 
от математического ожидания роста в популяции, 
в которой M(X) = 178 см и D(X) = 25 кв.см?
'''
mean = 178 
Sigma = math.sqrt(25)
x = 190 
result = abs((mean - x) / Sigma)
print("Task 5. рост человека равный 190 см откланяется от среднего квадратичного, равного ", mean, " на количество среднеквадратичных откланений, равных: ", round(result, 3))

